<?php

/**
 * Implementation of hook_menu().
 */
function fingerprint_server_menu() {
  $items = array();
  $items['user/%user/fingerprint'] = array(
    'title' => 'Fingerprint',
    'page callback' => 'site_fingerprint_credentials',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'file' => 'fingerprint_server.pages.inc',
  );

  $items['user/%user/fingerprint/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'weight' => -10,
  );

  $items['user/%user/fingerprint/add'] = array(
    'title' => 'Associate project',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fingerprint_server_key_add'),
    'access callback' => 'user_edit_access', // @todo permission
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'file' => 'fingerprint_server.pages.inc',
  );

  $items['admin/settings/fignerprint_server'] = array(
    'title' => 'Fingerprint server settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fingerprint_server_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fingerprint_server.pages.inc',
  );

  return $items;
}


/**
 * Implementation of hook_service().
 */
function fingerprint_server_service() {
  return array(
    array(
      '#method'           => 'fingerprint.getDefaultKeys',
      '#callback'         => 'fingerprint_services_get_default_keys',
      '#access callback'  => 'fingerprint_services_get_default_keys_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'array',
      '#help'             => t('Get the array of default keys, last is the most recent'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#arg'              => array(),
    ),

    array(
      '#method'           => 'fingerprint.supportedVersion',
      '#callback'         => 'fingerprint_services_supported_version',
      '#access callback'  => 'fingerprint_services_supported_version_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'array',
      '#help'             => t('Get the array of supported versions'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#arg'              => array(),
    ),

    array(
      '#method'           => 'fingerprint.isAnonymousKey',
      '#callback'         => 'fingerprint_services_is_anonymouskey',
      '#access callback'  => 'fingerprint_services_is_anonymouskey_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'boolean',
      '#help'             => t('Checks if the key is an anonymous key'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#args'              => array(
        array(
          '#name' => 'key',
          '#type' => 'string',
          '#description' => t('Hash key'),
        ),
      ),
    ),

    array(
      '#method'           => 'fingerprint.registerKey',
      '#callback'         => 'fingerprint_services_register_key',
      '#access callback'  => 'fingerprint_services_register_key_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'array',
      '#help'             => t('Register a key'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#args'              => array(),
    ),

    array(
      '#method'           => 'fingerprint.save',
      '#callback'         => 'fingerprint_services_save',
      '#access callback'  => 'fingerprint_services_save_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'struct',
      '#help'             => t('Saves the fingerprint'),
      '#args'              => array(
        array(
          '#name' => 'fingerprint',
          '#type' => 'struct',
          '#description' => t('Fingerprint node object'),
        ),
      ),
    ),

  );
}


/**
 * Implementation of hook_requirements().
 *
 * Checks if the clients can authenticate to the server
 */
function fingerprint_server_requirements($phase) {
  if ($phase != 'runtime') {
    return;
  }

  $services_ready = (bool)((variable_get('services_auth_module', '') == 'services_keyauth') &&
    (variable_get('services_use_key', FALSE) == TRUE) &&
    (variable_get('services_use_sessid', FALSE) == TRUE));


  $requirements['fingerprint_auth'] = array(
    'title' => t('Key authentication for fingerprint server'),
    'description' => t('Key authentication with session id has to be set in order to the clients can communicate with the server'),
    'value' => $services_ready ? t('Authentication set') : t('Authentication not set'),
    'severity' => $services_ready ? REQUIREMENT_OK : REQUIREMENT_ERROR,
  );

  return $requirements;
}

