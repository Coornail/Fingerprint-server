<?php

/**
 * Implementation of hook_menu().
 */
function fingerprint_server_menu() {
  $items = array();
  $items['user/%user/fingerprint'] = array(
    'title' => 'Fingerprint',
    'page callback' => 'site_fingerprint_credentials',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'file' => 'fingerprint_server.pages.inc',
  );

  $items['admin/settings/fignerprint_server'] = array(
    'title' => 'Fingerprint server settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fingerprint_server_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'fingerprint_server.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_user().
 *
 * Adds a services key when the user is registered
 * Sends the key to the user by email
 */
function fingerprint_server_user($op, &$edit, &$account, $category = NULL) {
  if ($op != 'insert') {
    return;
  }

  module_load_include('inc', 'services_keyauth', 'services_keyauth.admin');
  $key = array();
  $key['kid'] = md5(uniqid(mt_rand(), TRUE));
  $key['title'] = $account->mail;
  $key['domain'] = $account->name;
  $key['method_access'] = array('system.connect', 'user.login', 'node.save');

  $ret = services_keyauth_admin_keys_save(&$key);
  if ($ret == SAVED_NEW) {
    $params = array_merge($key, (array)$account);
    $new_params = array();
    // Prefix every parameter with a '!'
    foreach($params as $key => &$value) {
      if (!(is_array($value) || is_object($value))) {
        $new_params['!'. $key] = $value;
      }
    }

    drupal_mail('fingerprint_server', 'key_ready', $account->mail, user_preferred_language($account), $new_params);
  } else {
    drupal_set_message('Unable to generate api key, please contact the '. l('administrator', variable_get('site_mail')));
    watchdog('fingerprint_server', 'Unable to generate api key to uid '. $account->uid);
  }

}


/**
 * Implementation of hook_mail().
 */
function fingerprint_server_mail($key, &$message, $params) {
  $params['!services_url'] = url('services/xmlrpc', array('absolute' => true));
  if($key == 'key_ready') {
    $message['subject'] = t('Your fingerprint credentials are ready!');
    $message['body'] = t("Welcome to our fingerprint server!\n\nServer: !services_url\nUsername: !name\nApi key: !kid\n", $params);
  }
}


/**
 * Implementation of hook_nodeapi().
 *
 * Makes the newly created fingerprint node publicly visible
 */
function fingerprint_server_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'fingerprint' && $op == 'insert') { // Unpublish fingerprint node by default
    $node->status = 1;
  }
}


/**
 * Implementation of hook_service().
 */
function fingerprint_server_service() {
  return array(
    array(
      '#method'           => 'fingerprint.getDefaultKeys',
      '#callback'         => 'fingerprint_services_get_default_keys',
      '#access callback'  => 'fingerprint_services_get_default_keys_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'array',
      '#help'             => t('Get the array of default keys, last is the most recent'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#arg'              => array(),
    ),

    array(
      '#method'           => 'fingerprint.supportedVersion',
      '#callback'         => 'fingerprint_services_supported_version',
      '#access callback'  => 'fingerprint_services_supported_version_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'array',
      '#help'             => t('Get the array of supported versions'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#arg'              => array(),
    ),

    array(
      '#method'           => 'fingerprint.isAnonymousKey',
      '#callback'         => 'fingerprint_services_is_anonymouskey',
      '#access callback'  => 'fingerprint_services_is_anonymouskey_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'boolean',
      '#help'             => t('Checks if the key is an anonymous key'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#args'              => array(
        array(
          '#name' => 'key',
          '#type' => 'string',
          '#description' => t('Hash key'),
        ),
      ),
    ),

    array(
      '#method'           => 'fingerprint.registerKey',
      '#callback'         => 'fingerprint_services_register_key',
      '#access callback'  => 'fingerprint_services_register_key_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'array',
      '#help'             => t('Register a key'),
      '#auth'             => FALSE,
      '#key'              => FALSE,
      '#args'              => array(),
    ),

    array(
      '#method'           => 'fingerprint.save',
      '#callback'         => 'fingerprint_services_save',
      '#access callback'  => 'fingerprint_services_save_access',
      '#file'             => array('file' => 'services.inc', 'module' => 'fingerprint_server'),
      '#return'           => 'int',
      '#help'             => t('Saves the fingerprint'),
      '#args'              => array(
        array(
          '#name' => 'fingerprint',
          '#type' => 'struct',
          '#description' => t('Fingerprint node object'),
        ),
      ),
    ),

  );
}

